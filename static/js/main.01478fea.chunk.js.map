{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","value","items","error","handleChange","bind","handleSubmit","event","this","setState","target","preventDefault","url","fetch","then","res","json","result","console","log","className","onSubmit","type","name","onChange","placeholder","required","map","item","key","KB","MB","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"iOAqFeA,G,wDAjFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAAEC,MAAO,GAAIC,MAAO,GAAIC,MAAO,IAC5C,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAJL,E,yDAONE,GACTC,KAAKC,SAAS,CAAER,MAAOM,EAAMG,OAAOT,U,mCAG3BM,GAAQ,IAAD,OAChBA,EAAMI,iBACN,IAAIC,EAAM,oCAAsCJ,KAAKR,MAAMC,MAC3DY,MAAMD,GACDE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACG,SAACG,GACG,EAAKR,SAAS,CACVP,MAAOe,IAEXC,QAAQC,IAAIF,MAEhB,SAACd,GACG,EAAKM,SAAS,CACVN,MAAOA,S,+BAOvB,OACI,yBAAKiB,UAAU,OACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,QACX,wBAAIA,UAAU,eAAd,oBAGA,yBAAKA,UAAU,aACX,0BAAMC,SAAUb,KAAKF,cACjB,yBAAKc,UAAU,cACX,2BACIE,KAAK,OACLF,UAAU,eACVG,KAAK,MACLtB,MAAOO,KAAKR,MAAMC,MAClBuB,SAAUhB,KAAKJ,aACfqB,YAAY,oBACZC,UAAQ,KAGhB,yBAAKN,UAAU,cACX,4BACIE,KAAK,SACLF,UAAU,6BAFd,YAQR,yBAAKA,UAAU,cAAf,WACCZ,KAAKR,MAAME,MAAMyB,KAAI,SAACC,GAAD,OAClB,yBAAKC,IAAI,IAAIT,UAAU,aAAvB,QACUQ,EAAKE,GACX,6BAFJ,QAGUF,EAAKG,iB,GArErCC,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACLe,QAAQf,MAAMA,EAAM6C,a","file":"static/js/main.01478fea.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { value: \"\", items: [], error: \"\" };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ value: event.target.value });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        var url = \"http://127.0.0.1:5000/salary?num=\" + this.state.value;\n        fetch(url)\n            .then((res) => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        items: result,\n                    });\n                    console.log(result);\n                },\n                (error) => {\n                    this.setState({\n                        error: error,\n                    });\n                }\n            );\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"container\">\n                    <div className=\"row justify-content-center\">\n                        <div className=\"col-md-6\">\n                            <div className=\"card\">\n                                <h5 className=\"card-header\">\n                                    Salary converter\n                                </h5>\n                                <div className=\"card-body\">\n                                    <form onSubmit={this.handleSubmit}>\n                                        <div className=\"form-group\">\n                                            <input\n                                                type=\"text\"\n                                                className=\"form-control\"\n                                                name=\"num\"\n                                                value={this.state.value}\n                                                onChange={this.handleChange}\n                                                placeholder=\"Enter your salary\"\n                                                required\n                                            />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <button\n                                                type=\"submit\"\n                                                className=\"btn btn-primary btn-block\"\n                                            >\n                                                Submit\n                                            </button>\n                                        </div>\n                                    </form>\n                                    <div className=\"card-title\">Result:</div>\n                                    {this.state.items.map((item) => (\n                                        <div key=\"1\" className=\"card-text\">\n                                            KB = {item.KB}\n                                            <br />\n                                            MB = {item.MB}\n                                        </div>\n                                    ))}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}